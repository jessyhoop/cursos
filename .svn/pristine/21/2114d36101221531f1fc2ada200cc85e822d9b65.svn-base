<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Evaluacion_por_profesor extends CI_Controller {

    public function __construct() {
        parent::__construct();
        //cargamos la libreria html2pdf
        $this->load->library('html2pdf');
        //cargamos el modelo pdf_model
        $this->load->model('reportes_model');
    }

    private function createFolder() {
        if (!is_dir("./files")) {
            mkdir("./files", 0777);
            mkdir("./files/pdfs", 0777);
        }
    }

    public function index() {

        $suma = 0;
        $profesor = "";
        $nuevo = array();
        $elementos = array();
        $elemento_respuesta1 = array();
        $calificacion = 0;
        //establecemos la carpeta en la que queremos guardar los pdfs,
        //si no existen las creamos y damos permisos
        $this->createFolder();

        //importante el slash del final o no funcionarÃ¡ correctamente
        $this->html2pdf->folder('./files/pdfs/');

        //establecemos el nombre del archivo
        $this->html2pdf->filename('test.pdf');

        //establecemos el tipo de papel
        $this->html2pdf->paper('a4', 'portrait'); //vertical
//        $this->html2pdf->paper('a4', 'landscape'); //horizontal
        //datos que queremos enviar a la vista, lo mismo de siempre
        //funcion de prueba
//        $arre_respuesta_1 = $this->reportes_model->get_respuestas_1_by_grupo('001');
//
//        echo '<pre>';
//        print_r($arre_respuesta_1);
//        echo '</pre> </br></br></br></br></br></br>';
//        //a la funcion de prueba
//        foreach ($arre_respuesta_1 as $resp) {
//
//            $nuevo_prom[] = ['respuesta' => $resp['respuesta_1'], 'promedio' => $this->obtener_promedio_by_letra($resp['respuesta_1'])];
//        }
//
//        foreach ($nuevo_prom as $value) {
//            $calificacion += $value['promedio'];
//        }
//        $calificacion=$calificacion/count($nuevo_prom);
//        echo '<pre>';
//        print_r($nuevo_prom);
//        echo '</pre> </br></br></br></br></br></br>';
//
//        echo 'calificacion_Respuesta_1----->' . $calificacion;
        $this->obtener_el_minimo_promedio('001');
        $elementos = $this->reportes_model->get_elementos_captura();
        foreach ($elementos as $elemento) {
            $arreglo_promedio[] = ["calif_profesor" => 0,
                "hora_fin" => $elemento["hora_fin"],
                "hora_inicio" => $elemento["hora_inicio"],
                "fecha_inicio" => $this->convertir_fecha_formato_sql_a_diagonal($elemento["fecha_inicio"]),
                "fecha_fin" => $this->convertir_fecha_formato_sql_a_diagonal($elemento["fecha_fin"]),
                "calificacion_texto" => $this->obtener_calificacion_texto_by_calificacion($elemento['respuestas']),
                "clave_materia" => $elemento["clave_materia"],
                "materia" => $elemento['materia'],
                "grupo" => $elemento['grupo'],
                "nombre" => $elemento['nombre'],
                "respuesta_1" => $this->reportes_model->get_respuestas_1_by_grupo($elemento['grupo']),
                "promedio" => $this->obtener_promedio_by_id($elemento['respuestas'])
            ];
        }
        $arreglo_prom = array();
        //obtenemos todos los grupos del array $arreglo_promedio  para iniciar la busqueda
        foreach ($arreglo_promedio as $parte) {
            $grupos[] = $parte["grupo"];
        }
        $grupo_unico = array_unique($grupos);

        foreach ($grupo_unico as $un) {
            $contador = 0;
            foreach ($arreglo_promedio as $original) {
                if ($un == $original["grupo"]) {
                    $suma = $suma + $original['promedio'];
                    $profesor = $original['nombre'];
                    $hora_fin = $original['hora_fin'];
                    $hora_inicio = $original['hora_inicio'];
                    $fecha_inicio = $original['fecha_inicio'];
                    $fecha_fin = $original['fecha_fin'];
                    $respuesta_1 = $original['respuesta_1'];
                    $respuesta_1_promedio = $arreglo_prom;

//                    $calificacion_texto = $original['calificacion_texto'];
                    $clave_materia = $original['clave_materia'];
                    $materia = $original['materia'];
//                    $grupo = $original['grupo'];
                    $contador++;
                }
            }
            $ele['grupo'] = $un;
//            $ele['promedio'] = ($suma);
            $ele['promedio'] = ($suma) / $contador;
            $ele['profesor'] = $profesor;
            $ele['hora_fin'] = $hora_fin;
            $ele['hora_inicio'] = $hora_inicio;
            $ele['fecha_inicio'] = $fecha_inicio;
            $ele['fecha_fin'] = $fecha_fin;
            $ele['calificacion_texto'] = $this->obtener_calificacion_texto_by_calificacion($ele['promedio']);
            $ele['clave_materia'] = $clave_materia;
            $ele['materia'] = $materia;
            $ele['respuesta_1'] = $respuesta_1;
            $ele['respuesta_1_promedio'] = ["promedio" => $this->obtener_promedio_por_respuesta($un), "min" => $this->obtener_el_minimo_promedio($un)];
            $ele['numero_de_cuestionarios'] = $contador;
            array_push($nuevo, $ele);
            $suma = 0;
        }

        echo '<pre>';
        print_r($nuevo);
        echo '</pre>';

//mandamos el array para que se muestre  en el php
        $data = array('calificaciones' => $this->ordenar_array_asc_by_elemento($nuevo, 'promedio'));
//        $this->html2pdf->html(utf8_decode($this->load->view('Reportes/reporte_evaluacion_por_profesor', $data, true)));
        //si el pdf se guarda correctamente lo mostramos en pantalla
        if ($this->html2pdf->create('save')) {
            $this->show();
        }
    }

//funcion que calcula el promedio por respuesta
    public function obtener_promedio_por_respuesta($grupo) {
        $calificacion = 0;

        $arre_respuesta = $this->reportes_model->get_respuestas_1_by_grupo($grupo);

        foreach ($arre_respuesta as $resp) {

            $nuevo_prom[] = ['respuesta' => $resp['respuesta_1'], 'promedio' => $this->obtener_promedio_by_letra($resp['respuesta_1'])];
        }

        foreach ($nuevo_prom as $value) {
            $calificacion += $value['promedio'];
        }
        return $calificacion = $calificacion / count($nuevo_prom);
    }

    // funcion que obtiene el minimo de calificacion
    public function obtener_el_minimo_promedio($grupo) {
        $calificacion = 0;

        $arre_respuesta = $this->reportes_model->get_respuestas_1_by_grupo($grupo);

        foreach ($arre_respuesta as $resp) {

            $nuevo_prom[] = $this->obtener_promedio_by_letra($resp['respuesta_1']);
        }
//
//        print_r($nuevo_prom);
//         echo min($nuevo_prom);
        return min($nuevo_prom);
    }

//funcion que ordena un array multi con base a un elemento del mismo
    function ordenar_array_asc_by_elemento($array_nuevo, $elemento_a_ordenar) {
        $ordenar = array($elemento_a_ordenar => array());

        foreach ($array_nuevo as $clave => $nuevo_a) {
            $ordenar[$elemento_a_ordenar][$clave] = $nuevo_a[$elemento_a_ordenar];
        }

        array_multisort($ordenar[$elemento_a_ordenar], SORT_DESC, $array_nuevo);
        return $array_nuevo;
    }

    public function obtener_promedio_by_id($respuesta) {
        $strtempo = $respuesta;
        //print_r($split[0]["respuestas"]);
        $arraytempo = str_split($strtempo);

        // var_dump($arraytempo);
        //print_r($arraytempo[0]);
        for ($x = 0; $x < count($arraytempo); $x++) {
            switch ($arraytempo[$x]) {
                case 'a':
                    $arraytempo[$x] = 10;
                    break;

                case 'b':
                    $arraytempo[$x] = 8;
                    break;
                case 'c':
                    $arraytempo[$x] = 6;
                    break;

                case 'd':
                    $arraytempo[$x] = 5;
                    break;
            }//fin switch
        }//fin for

        $average = array_sum($arraytempo) / count($arraytempo);
        return $average;
    }

    public function obtener_promedio_by_letra($letra) {


        switch ($letra) {
            case 'a':
                return $letra = 10;
                break;

            case 'b':
                return $letra = 8;
                break;
            case 'c':
                return $letra = 6;
                break;

            case 'd':
                return $letra = 5;
                break;
        }//fin switch
    }

    public function obtener_calificacion_texto_by_calificacion($calificacion) {

//       $calificacion= $this->obtener_promedio_by_id($calificacion_respuesta);

        if ($calificacion <= 10 && $calificacion >= 9) {
            return "EXCELENTE";
        } elseif ($calificacion < 9 && $calificacion >= 8) {
            return "MUY BIEN";
        } elseif ($calificacion < 8 && $calificacion >= 5) {
            return "BIEN";
        } elseif ($calificacion <= 4 && $calificacion = 0) {
            return "DEFICIENTE";
        }
    }

    public function convertir_fecha_formato_sql_a_diagonal($fecha) {
        $valores = explode('-', $fecha);
        if (count($valores) == 3 && checkdate($valores[1], $valores[2], $valores[0])) {
            return $valores[2] . '/' . $valores[1] . '/' . $valores[0];
        }
        return FALSE;
    }

    //funcion que ejecuta la descarga del pdf
    public function downloadPdf() {
        //si existe el directorio
        if (is_dir("./files/pdfs")) {
            //ruta completa al archivo
            $route = ("http://localhost/ccaragon/codeigniter/files/pdfs/test.pdf");

//            $route = base_url("files/pdfs/test.pdf");
            //nombre del archivo
            $filename = "test.pdf";
            //si existe el archivo empezamos la descarga del pdf
            if (file_exists("./files/pdfs/" . $filename)) {
                header("Cache-Control: public");
                header("Content-Description: File Transfer");
                header('Content-disposition: attachment; filename=' . basename($route));
                header("Content-Type: application/pdf");
                header("Content-Transfer-Encoding: binary");
                header('Content-Length: ' . filesize($route));
                readfile($route);
            }
        }
    }

    //esta funciÃ³n muestra el pdf en el navegador siempre que existan
    //tanto la carpeta como el archivo pdf
    public function show() {
        if (is_dir("./files/pdfs")) {
            $filename = "test.pdf";
//            $route = base_url("files/pdfs/test.pdf");
            $route = ("http://localhost/ccaragon/codeigniter/files/pdfs/test.pdf");

            if (file_exists("./files/pdfs/" . $filename)) {
                header('Content-type: application/pdf');
                readfile($route);
            }
        }
    }

    //funciÃ³n para crear y enviar el pdf por email
    //ejemplo de la libreria sin modificar
}

/* End of file pdf_ci.php */
/* Location: ./application/controllers/pdf_ci.php */
